/*
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.
Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int func(TreeNode* node,int &p,int ele,int r)
    {   if(!node)
            return 0;
        if(node->val==ele)
            return r;
        p=node->val;
        int left=func(node->left,p,ele,r+1);
        if(left)
            return left;
        p=node->val;
        int right=func(node->right,p,ele,r+1);
        return right;
    }
    bool isCousins(TreeNode* root, int x, int y) {
        if(root==NULL)
            return false;
        int h1,h2,parenth1=0,parenth2=0;
        h1=func(root,parenth1,x,0);
        h2=func(root,parenth2,y,0);
        if(parenth1!=parenth2)
            if(h1==h2)
                return true;
        return false;
    }
};
