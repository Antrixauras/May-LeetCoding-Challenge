/*
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
*/

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int> m;
        for(int i=0;i<s.length();i++)
            m[s[i]]++;
        string res;
        vector<pair<int,char>> v;
        for(auto i:m)
            v.push_back({i.second,i.first});
        int n;
        sort(v.begin(),v.end(),[] (const pair<int,char> &a,const pair<int,char> &b){return (a.first>b.first);});
        for(int i=0;i<v.size();i++)
        {
            n=v[i].first;
            while(n)
            {
                res+=v[i].second;
                n--;
            }
        }
        return res;
    }
};
auto deSyncIOofCPPfromC = []() {
	std::ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	return 0;
}();
