/*
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
*/

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int len=s1.length();
        int window=s2.length();
        if(len>window) return false;
        vector<int> s1hash(26,0);
        vector<int> s2hash(26,0);
        int left=0,right=0;
        while(right<len)
        {
            s1hash[s1[right]-'a']+=1;
            s2hash[s2[right++]-'a']+=1;
        }
        right-=1;
        while(right<window)
        {
            if(s1hash==s2hash)
                return true;
            right+=1;
            s2hash[s2[left]-'a']-=1;
            left+=1;
            if(right<window)
                s2hash[s2[right]-'a']+=1;
        }
        return false;
    }
};
