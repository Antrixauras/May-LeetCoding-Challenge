/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
*/

class Trie {
    struct Tree
    {
        char val;
        int count;
        int en;
        Tree* child[26];
    };
    Tree *root;
    Tree* getnode(int index)
    {
        Tree* nn=new Tree;
        nn->val='a'+index;
        nn->count=nn->en=0;
        for(int i=0;i<26;i++)
            nn->child[i]=NULL;
        return nn;
    }
public:
    /** Initialize your data structure here. */
    Trie() {
        root=getnode('/'-'a');
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Tree* curr=root;
        int index;
        for(int i=0;i<word.length();i++)
        {
            index=word[i]-'a';
            if(curr->child[index]==NULL)
                curr->child[index]=getnode(index);
            curr->child[index]->count+=1;
            curr=curr->child[index];
        }
        curr->en+=1;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Tree* curr=root;
        int index;
        for(int i=0;i<word.length();i++)
        {
            index=word[i]-'a';
            if(curr->child[index]==NULL)
                return false;
            curr=curr->child[index];
        }
        return (curr->en>0);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        int index;
        Tree* curr=root;
        for(int i=0;i<prefix.length();i++)
        {
            index=prefix[i]-'a';
            if(curr->child[index]==NULL)
                return false;
            curr=curr->child[index];
        }
        return (curr->count>0);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
