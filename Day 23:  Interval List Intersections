/*Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

Example 1:
Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
*/

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        int aptr=0,bptr=0;
        int n=A.size();
        int m=B.size();
        vector<vector<int>> ans;
        vector<int> temp(2);
        while(aptr<n&&bptr<m)
        {
            if(A[aptr][0]<=B[bptr][1]&&A[aptr][1]>=B[bptr][0])
            {
                temp[0]=max(A[aptr][0],B[bptr][0]);
                temp[1]=min(A[aptr][1],B[bptr][1]);
                ans.push_back(temp);
            }
            if(A[aptr][1]<B[bptr][1])
                aptr++;
            else
                bptr++;
        }
        return ans;
    }
};
